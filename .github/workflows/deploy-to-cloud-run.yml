name: Deploy to GCP Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: dyvine-api
  REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker $REGISTRY

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories describe $SERVICE_NAME \
          --location=$REGION \
          --project=$PROJECT_ID || \
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=$REGION \
          --project=$PROJECT_ID

    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA -f deploy/Dockerfile .

    - name: Push Docker image
      run: |
        docker push $REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to GCP Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_NAME }}
        image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        flags: |
          --allow-unauthenticated
          --port=8000
          --cpu=1
          --memory=2Gi
          --timeout=300s
          --concurrency=80
          --max-instances=10
          --min-instances=0
        env_vars: |
          DEBUG=${{ secrets.DEBUG }}
          HOST=${{ secrets.HOST }}
          PORT=${{ secrets.PORT }}
          PROJECT_NAME=${{ secrets.PROJECT_NAME }}
          VERSION=${{ secrets.VERSION }}
          PREFIX=${{ secrets.PREFIX }}
          RATE_LIMIT_PER_SECOND=${{ secrets.RATE_LIMIT_PER_SECOND }}
          CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          API_KEY=${{ secrets.API_KEY }}
          ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          R2_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
          R2_ENDPOINT=${{ secrets.R2_ENDPOINT }}
          DOUYIN_COOKIE=${{ secrets.DOUYIN_COOKIE }}
          DOUYIN_USER_AGENT=${{ secrets.DOUYIN_USER_AGENT }}
          DOUYIN_REFERER=${{ secrets.DOUYIN_REFERER }}
          DOUYIN_PROXY_HTTP=${{ secrets.DOUYIN_PROXY_HTTP }}
          DOUYIN_PROXY_HTTPS=${{ secrets.DOUYIN_PROXY_HTTPS }}

    - name: Get GCP Cloud Run URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Health Check
      run: |
        sleep 30  # Wait for service to be ready
        curl -f $SERVICE_URL/health || exit 1
